@model JustBlog.Models.Admin.PostEditViewModel
@using JustBlog.Models.Admin
@using JustBlog.Core.Objects
@{
    ViewBag.Title = "EditPost";
    //Layout = "~/Views/Shared/_AdminLayout.cshtml";
    Layout = null;
    var mod = Model;
    var cachedSelectList = Cache["CategorySelectList"] as List<SelectListItem>;
    string selectedId = cachedSelectList.FirstOrDefault(s => s.Selected)?.Value ?? "0";
    HtmlHelper.ClientValidationEnabled = true;
    HtmlHelper.UnobtrusiveJavaScriptEnabled = true;

}

<div class="modal-header">
    <h5 class="modal-title" id="exampleModalLongTitle">Edit Post</h5>
    <button type="button" class="close" aria-label="Close" id="btnClose1">
        <span aria-hidden="true">&times;</span>
    </button>
</div>
<div class="modal-body">
    @using (Html.BeginForm("EditPost", "Post", FormMethod.Post, new {id = "submittedForm", enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        @Html.HiddenFor(m => m.Post.Id)

        <div class="form-group">
            @Html.LabelFor(m => m.Post.Title, new { @class = "control-label col-md-6" })
            <div class="col-12">
                @Html.TextBoxFor(m => m.Post.Title,
                                                            new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.Post.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Post.ShortDescription, new { @class = "control-label col-md-6" })
            <div class="col-12">
                @Html.TextBoxFor(m => m.Post.ShortDescription,
                                                  new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.Post.ShortDescription, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Post.Meta, new { @class = "control-label col-md-6" })
            <div class="col-12">
                @Html.TextBoxFor(m => m.Post.Meta,
                                                 new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.Post.Meta, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Post.UrlSlug, new { @class = "control-label col-md-6" })
            <div class="col-12">
                @Html.TextBoxFor(m => m.Post.UrlSlug,
                                                 new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.Post.UrlSlug, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Post.Published, new { @class = "control-label" })
            <div class="col-12">
                @Html.EditorFor(m => m.Post.Published,
                                                    new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(m => m.Post.Published, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Post.PostedOn, new { @class = "control-label col-md-6" })
            <div class="col-12">
                @Html.EditorFor(m => m.Post.PostedOn,
                                          new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(m => m.Post.PostedOn, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Post.Modified, new { @class = "control-label col-md-6" })
            <div class="col-12">
                @Html.EditorFor(m => m.Post.Modified,
                                 new { htmlAttributes = new { @class = "form-control", id = "datePicker" } })
                @Html.ValidationMessageFor(m => m.Post.Modified, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Категория", new { @class = "control-label col-md-6" })
            <div class="col-12">
                @Html.DropDownListFor(m => m.CategoryListId,
                                                cachedSelectList,
                                                new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.CategoryListId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Теги", new { @class = "control-label col-md-6" })
            <div class="col-12">
                <input name='tags' value="@ViewData["tagsValue"]">
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Post.Description, new { @class = "control-label col-md-6" })
            @Html.ValidationMessageFor(m => m.Post.Description, "", new { @class = "text-danger" })
            <div class="col-12">
                @Html.TextAreaFor(s =>s.Post.Description,

                                 new { @class = "form-control", rows = 10, overflow_y = "scroll", resize = "none", id = "froala-editor" })

            </div>
        </div>


        <div class="modal-footer">
            <input type="submit" value="Submit" class="btn btn-primary" id="btnSubmit" />
            <button type="button" class="btn btn-secondary closefirstmodal" id="btnClose2">Close</button>
        </div>


    }
</div>

@Scripts.Render("~/bundles/jqueryval")

<script>
    $('textarea#froala-editor').on('froalaEditor.file.uploaded', function (e, editor, response) {
        console.log(e);
        console.log(editor);
        console.log(response);
    });

    $("textarea#froala-editor").on('froalaEditor.image.inserted', function (e, editor, $img, response) {
        console.log(e);
        console.log(editor);
        console.log($img);
        console.log(response);
    });

    $(function () {
        //изменял ли пользователь данные формы
        let dataChanged = false;


        if (!$('textarea#froala-editor').data('froala.editor')) {
            $('textarea#froala-editor').froalaEditor({
                toolbarButtons: ['bold', 'italic', 'underline', 'strikeThrough', 'subscript', 'superscript', '|', 'fontSize', '|', 'paragraphFormat', 'align', 'formatOL', 'formatUL', 'outdent', 'indent', 'quote', '-', 'insertLink', 'insertImage', 'insertFile', '|', 'insertHR', 'selectAll', 'clearFormatting', '|', 'undo', 'redo'],
                imageUploadParam: 'image_param',
                imageUploadURL: '@Url.Action("TakeImage", "Image")',
                imageUploadParams: { id: 'my_editor' },
                imageUploadMethod: 'POST',
                imageMaxSize: 5 * 1024 * 1024,
                imageAllowedTypes: ['jpeg', 'jpg', 'png']
            }).on('froalaEditor.image.beforeUpload', function (e, editor, images) {
                // Return false if you want to stop the image upload.
                console.log(images);
                console.log();
            })
                .on('froalaEditor.image.uploaded', function (e, editor, response) {
                    // Image was uploaded to the server.
                    console.log(responce);
                    console.log();
                })
                .on('froalaEditor.image.inserted', function (e, editor, $img, response) {
                    // Image was inserted in the editor.
                    console.log($img);
                    console.log();
                })
                .on('froalaEditor.image.replaced', function (e, editor, $img, response) {
                    // Image was replaced in the editor.
                }).on('froalaEditor.image.error', function (e, editor, error, response) {
                    // Bad link.
                    if (error.code == 1) { }

                    // No link in upload response.
                    else if (error.code == 2) {  }

                    // Error during image upload.
                    else if (error.code == 3) {
                        console.log(error);
                    }

                    // Parsing response failed.
                    else if (error.code == 4) { }

                    // Image too text-large.
                    else if (error.code == 5) { }

                    // Invalid image type.
                    else if (error.code == 6) { }

                    // Image can be uploaded only to same domain in IE 8 and IE 9.
                    else if (error.code == 7) { }

        // Response contains the original server response to the request if available.
      });
        }


        //установка текущей даты свойству "дата изменения"
        document.getElementById("datePicker").valueAsDate = new Date()

        var tags = @Model.TagsListJson;

        var input3 = document.querySelector('input[name=tags]'),
            tagify3 = new Tagify(input3, {
                delimiters: ", ",
                suggestionsMinChars: 1,
                maxTags: 7,
                blacklist: ["fuck", "shit", "pussy"],
                enforceWhitelist: true,
                whitelist: tags
            })


        $('#CategoryListId').val(@selectedId).change();
        $("#submittedForm").submit(function (e) {
            clickedOnce = true;
            e.preventDefault();
            //to the implementation in partial view reload the validators
            var _form = $("#submittedForm")
                .removeData("validator") /* added by the raw jquery.validate plugin */
                .removeData("unobtrusiveValidation");/* added by the jquery unobtrusive plugin */
            var _formValue = $(this)[0];

           $.validator.unobtrusive.parse(_form);

            var isValid = _form.valid();
            console.log(isValid);
            console.log("");
            console.log(_form.data('unobtrusiveValidation'));


            if (isValid) {
                let _data = new FormData(_formValue);

                $.ajax({
                    method: "POST",
                    processData: false,
                    cache: false,
                    contentType: false,
                    url: '@Url.Action("EditPost", "Post")',
                    data: _data,
                    success: function (response) {
                        if (response.success == true) {
                            alert(response.responseText);
                            $("#editModal").modal('hide');
                            dataChanged = false;
                            //Перезагружается страницу
                            //location.reload();
                        } else {
                            // DoSomethingElse()
                            alert(response.responseText);
                        }


                    },
                    error: function (jqXHR) {
                        alert("Что-то пошло не так...");
                    }
                })
                    .done(function (data, textStatus, jqXHR) {

                })
            }
        })


        //проверка на внесение изменений в данные формы
        $("input, select").change(function () {
            dataChanged = true;
        })

        //подтверждение закрытие модальной формы
        $("#btnClose1, #btnClose2").click(function (e) {
            e.preventDefault();
            //debugger;
            if (dataChanged) {
                var closeConfirmed = confirm("Были внесены изменения. \nЗакрыть окно?");
                if (closeConfirmed) {
                    $("#editModal").modal('hide');
                    dataChanged = false;
                    $("#target").empty();
                }
            }
            else {
                $("#editModal").modal('hide');
                dataChanged = false;
                $("#target").empty();
            }
            //$("#target").empty();
        })
    })

    function InitEditor() {
        if (!$('#froala-editor').data('froala.editor')) {
            $('#froala-editor').froalaEditor();
        }
    }
</script>
